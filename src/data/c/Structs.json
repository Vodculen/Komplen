{
	"page": "C Structs",
	"content": [
		{
			"title": "Declaring C Structs",
			"section": [
				{ "text": "Structs (or Structures) are useful for wanting to group multiple related variables known as members." },
				{ "text": "Notice with structs you can declare multiple different datatypes and data structures unlike an array." },
				{ 
					"program": {
						"language": "C",
						"name": "main.c",
						"program": [
							"struct INFO",
							"{",
							"    char* firstName;",
							"    char* lastName;",
							"    int age;",
							"};"
						],
						"displayRun": false
					}
				},
				{ 
					"text": [
						"But thats not the only way to declare a ",
						{ "codeBlock": { "language": "c", "input": "struct" } },
						", theres another way."
					]
				},
				{ 
					"program": {
						"language": "C",
						"name": "main.c",
						"program": [
							"typedef struct",
							"{",
							"    char* firstName;",
							"    char* lastName;",
							"    int age;",
							"} INFO;"
						],
						"displayRun": false
					}
				},
				{ "text": "There is simply no difference between the two, its just the one you would like to use." },
				{ "text": "Its just important to use only one style throughout your program." }
			]
		},
		{
			"title": "Using C Structs",
			"section": [
				{ 
					"text": [
						"When using a ",
						{ "codeBlock": { "language": "c", "input": "struct" } },
						" you first have to tell the program its a ",
						{ "codeBlock": { "language": "c", "input": "struct" } },
						", then what ",
						{ "codeBlock": { "language": "c", "input": "struct" } },
						", and lastly the local name you want to use for the ",
						{ "codeBlock": { "language": "c", "input": "struct" } },
						"." 
					]
				},
				{ 
					"text": [ 
						"Then you have to get the value by using the local name, then a dot, then lastly the member of the ",
						{ "codeBlock": { "language": "c", "input": "struct" } },
						" you want." 
					] 
				},
				{ 
					"program": {
						"language": "C",
						"name": "main.c",
						"program": [
							"#include <stdio.h>",
							"",
							"struct GRADE",
							"{",
							"    char letter;",
							"    int percentage;",
							"};",
							"",
							"int main()",
							"{",
							"    struct GRADE grade;",
							"",
							"    grade.letter = 'A';",
							"    grade.percentage = 95;",
							"",
							"    printf(\"Letter Grade: %c, Percentage Grade: %d%\", grade.letter, grade.percentage);",
							"",
							"    return 0;",
							"}"
						],
						"output": "Letter Grade: A, Percentage Grade: 95%"
					}
				},
				{ "text": "When using a typedef struct you only need what struct your using, and the local name you want to use for the struct." },
				{ "text": "Then you have to get the value by using the local name, then a arrow, then the member of the struct you want." },
				{ 
					"program": {
						"language": "C",
						"name": "main.c",
						"program": [
							"#include <stdio.h>",
							"",
							"typedef struct",
							"{",
							"    char letter;",
							"    int percentage;",
							"} GRADE;",
							"",
							"int main()",
							"{",
							"    GRADE grade;",
							"",
							"    grade -> letter = 'A';",
							"    grade -> percentage = 95;",
							"",
							"    printf(\"Letter Grade: %c, Percentage Grade: %d%\", grade -> letter, grade -> percentage);",
							"",
							"    return 0;",
							"}"
						],
						"output": "Letter Grade: A, Percentage Grade: 95%"
					}
				}
			]
		}
	]
}